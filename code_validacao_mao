#lang racket

;carta representada como '((A)(COPAS))

;pegar naipe da carta
(define (naipe carta)
  (cdr carta ))

;pegar valor da carta
(define (valor carta)
  (car carta))

;considerando uma mão ordenada
;verificar numero de trincas
;mao representada como:
'(((2)(COPAS))((2)(ESPADAS))((2)(OUROS))((4)(ESPADAS))((3)(OUROS))((10)(PAUS))((9)(COPAS))((8)(PAUS))((10)(ESPADAS)))

;*AINDA VALIDANDO*
(define (verifica-num-trincas mao)
  (let percorre ([n (length mao)][lst2 null][lst1 mao])
    (cond [(and (= n 0)(= (length lst2) 0))(display "não há trincas")] 
          [(and (= n 0)(not (= (length lst2) 0)))(/ (length lst2) 3)]
          [(= (length lst2) 0)(percorre (- n 1) (cons (first lst1) lst2) (rest lst1))]
          [(and (or (= (length lst1) 1)(= (length lst1) 2))(equal? (first lst1)(first lst2)))(cons (first lst1) lst2)]
          [(and (or (= (length lst1) 1)(= (length lst1) 2))(not(equal? (first lst1)(first lst2))))(percorre (- n 1) lst2 (rest lst1))]
          [(or (equal? (first lst1)(third lst1))(equal? (first lst1)(first lst2))) (percorre (- n 1) (cons (first lst1) lst2) (rest lst1))]
          [else (percorre (- n 1) lst2 (rest lst1))])))

