#lang racket

;carta representada como '((A)(COPAS))

;pegar naipe da carta
(define (naipe carta)
  (cdr carta ))

;pegar valor da carta
(define (valor carta)
  (car carta))

;considerando uma mão ordenada
;verificar numero de trincas
;mao representada como:
'(((2)(COPAS))((2)(ESPADAS))((2)(OUROS))((4)(ESPADAS))((3)(OUROS))((10)(PAUS))((9)(COPAS))((8)(PAUS))((10)(ESPADAS)))


(define (verifica-num-trincas mao)
  (let percorre ([n (length mao)][lst2 null][lst1 mao])
    (cond [(and (= n 0)(= (length lst2) 0))(display "não há trincas")] ;
          [(and (= n 0)(not (= (length lst2) 0)))(/ (length lst2) 3)] ;
          [(equal? (car(first mao))(car(second mao))) (percorre (- n 1) (cons (car(first mao)) lst2) (rest mao))]; 
          [else (percorre (- n 1) (lst2) (rest mao))]))); 


;ln 20: se percorre toda a lst1 (mao) e não ha nada na lst2, nao há trincas
;ln 21: se percorre a lst2 e ela nao está vazia então mostra o numero de trincas na mao
;ln 22: se o valor da primeira carta é igual ao valor da segunda carta então coloca o valor da primeira na lst2
;ln 23: se nada do acima ocorrer ele tira o primeiro valor da lst1 (mao), passa a lst2,  e passa a mao sem o valor ja verificado 
